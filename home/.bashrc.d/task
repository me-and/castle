_task_quick_quiet () {
	command task rc.color=0 rc.detection=0 rc.gc=0 rc.hooks=0 rc.recurrence=0 rc.verbose=0 "$@"
}

# I want to do Taskwarrior garbage collection daily, including on systems that
# don't have systemd.  Check when that was last done, and if it wasn't today,
# do it now.
if command -v systemctl >/dev/null; then
	# Systemctl is present, so assume anything of this ilk will be handled
	# by systemd.
	:
else
	_TASK_GC_TIMESTAMP_FILE=~/.local/share/task/.gclastrun
	_record_taskwarrior_gc () {
		for arg; do
			if [[ "$arg" = rc.gc[:=]1 ]]; then
				touch "$_TASK_GC_TIMESTAMP_FILE"
				break
			fi
		done
	}
	bashwrap task '_record_taskwarrior_gc "$@"'

	if [[ ! -v TASKLOOP ]]; then
		_taskwarrior_gc () {
			command task rc.gc=1 rc.color=0 rc.detection=0 rc.hooks=0 rc.recurrence=0 rc.verbose=0 status:pending count >/dev/null &&
			touch "$_TASK_GC_TIMESTAMP_FILE"
		}
		_maybe_do_taskwarrior_gc () {
			local cutoff_dt
			local -i data_age now_s cutoff_s last_gc_s
			data_age="$(file-age ~/.local/share/task/undo.data)"

			# Check if the data file has changed in the last 30 minutes.
			# If it has, assume the user's recently active and we don't
			# want to do garbage collection under their feet.
			if (( data_age < (60*30) )); then
				return
			fi

			# Always do garbage collection if the timestamp file doesn't
			# exist.
			if [[ ! -e "$_TASK_GC_TIMESTAMP_FILE" ]]; then
				_taskwarrior_gc
				return
			fi

			# Check when garbage collection was last run; if it hasn't been
			# run since 4am this morning, run it now.  This works by
			# comparing the timestamp now in seconds since epoch to the
			# timestamp of the most recent 4am.
			printf -v cutoff_dt '%(%F)TT04:00' -1
			printf -v now_s '%(%s)T' -1
			cutoff_s="$(date -d "$cutoff_dt" '+%s')"
			if (( cutoff_s >= now_s )); then
				# It's between midnight and 4am, so check whether garbage
				# collection was last run before or after 4am _yesterday_.
				(( cutoff_s -= (60*60*24) ))
			fi

			last_gc_s="$(date -r "$_TASK_GC_TIMESTAMP_FILE" '+%s')"
			if (( cutoff_s >= last_gc_s )); then
				_taskwarrior_gc
			fi
		}

		_maybe_do_taskwarrior_gc

		unset -f _taskwarrior_gc _maybe_do_taskwarrior_gc
	fi
fi

# Function to enable `task <filter> (done-replace|del-replace) <new-task>`,
# which marks one task as done or deleted and creates a new task that has the
# same properties (including both blocked and blocking tasks) as the previous
# one.
#
# I'd prefer this to be a script with a Taskwarrior alias pointing to it, but
# that approach doesn't allow using the normal Taskwarrior interface of having
# filter arguments before the command and command arguments after it.
_task_done_replace () {
	local -i n
	[[ -v inside_task_done_replace ]] && return 0
	for (( n=1; n<=$#; n++ )); do
		if [[ "${!n}" = done-replace || "${!n}" = del-replace ]]; then
			local inside_task_done_replace=Yes
			local source_set=
			local old_uuid blocks arg name
			local -a filter_args description_args params column_names

			# Always want to reset the rtype on any new task.
			params=(rtype:)

			filter_args=("${@:1:n-1}")
			old_uuid="$(_task_quick_quiet "${filter_args[@]}" _unique uuid)" || return "$?"
			if [[ -z "$old_uuid" ]]; then
				wrap_message <<<"No task matching filter ${filter_args[*]@Q}" >&2
				return 1
			elif [[ "$old_uuid" != ????????-????-????-????-???????????? ]]; then
				wrap_message <<<"More than one task matching filter ${filter_args[*]@Q}" >&2
				return 1
			fi

			# New task needs to block the same tasks as the
			# previous one.
			blocks="$(_task_quick_quiet depends.has:"$old_uuid" -COMPLETED -DELETED _unique uuid)" || return "$?" # Newline separated
			blocks="${blocks//$'\n'/,}"  # Now it's comma separated
			params+=(blocks:"$blocks")

			# Left to its own devices, Taskwarrior will treat
			# arguments that aren't setting parameters as being
			# annotation text, where I'd rather they be treated as
			# the task description, similar to `task add`.  Work
			# out which arguments are task parameters and which
			# aren't.
			column_names=($(_task_quick_quiet _columns)) || return "$?"
			for arg in "${@:n+1}"; do
				for name in "${column_names[@]}"; do
					if [[ "$arg" = "$name":* || "$arg" = '-'* || "$arg" = '+'* ]]; then
						if [[ "$arg" = source:* ]]; then
							source_set=Yes
						fi
						params+=("$arg")
						continue 2
					fi
				done
				description_args+=("$arg")
			done

			# If the new task doesn't have an explicit source, the
			# old one is likely incorrect, so clear it.
			if [[ ! "$source_set" ]]; then
				params+=(source:)
			fi

			if (( "${#description_args[*]}" > 0 )); then
				# Description has been specified, so record it.
				# If there's no description, and it hasn't been
				# included with an explicit `description:...`
				# setting caught by the previous argument
				# processing, Taskwarrior will just use the old
				# description on the new task.
				params+=(description:"${description_args[*]}")
			fi

			task "$old_uuid" duplicate "${params[@]}" || return "$?"

			if [[ "${!n}" = done-replace ]]; then
				task "$old_uuid" done || return "$?"
			else
				task "$old_uuid" delete || return "$?"
			fi
			did_done_replace=Yes
			return 0
		fi
	done
}

bashwrap task '
	local did_done_replace
	_task_done_replace "$@" || return "$?"
	[[ "$did_done_replace" ]] && return 0
	'

# Wrapper to allow the filter "project.sub:x" to be converted to
# "( project.is:x or project:x. )", i.e. excluding tasks with a project like
# "xx" which a simple "project:x" would pick up, and a similar rule for
# "project.nsub:".
if [[ -v tmpcmd ]]; then
	wrap_message <<<'variable tmpcmd already set' >&2
	return 1
fi
tmpcmd='
	local -a newargs
	local arg val
	for arg; do
		if [[ "$arg" = project.sub:* ]]; then
			val="${arg#project.sub:}"
			newargs+=(\( project.is:"$val" or project:"$val". \))
		elif [[ "$arg" = project.nsub:* ]]; then
			val="${arg#project.nsub:}"
			newargs+=(\( project.isnt:"$val" project.not:"$val". \))
		else
			newargs+=("$arg")
		fi
	done
	set -- "${newargs[@]}"
	'
bashwrap task "$tmpcmd"
bashwrap taskloop "$tmpcmd"
unset tmpcmd

bashwrap task '
	local arg command_is_projects= list_all_projects_set=
	for arg; do
		case "$arg" in
			projects)
				command_is_projects=Yes
				;;
			rc.list.all.projects[:=]*)
				list_all_projects_set=Yes
				;;
		esac
	done
	if [[ "$command_is_projects" && -z "$list_all_projects_set" ]]; then
		set -- rc.list.all.projects=1 -COMPLETED -DELETED "$@"
	fi
	'


fo () {
	if (( $# == 0 )); then
		echo 'No filter specified' >&2
		return 1
	fi
	local uuid
	local -a uuids
	uuids=($(_task_quick_quiet "$@" _unique uuid)) || return "$?"
	if (( ${#uuids[*]} == 0 )); then
		echo 'No matched tasks' >&2
		return 1
	fi
	for uuid in "${uuids[@]}"; do
		TPFILTER+=(uuid.not:"$uuid")
	done
}

# Version of fo for use with the taskloop script...
tlo () {
	trap 'trap - RETURN ERR; return' RETURN ERR
	local report f all=
	local -a reports=() files uuids

	while [[ "$1" = -* ]]; do
		if [[ "$1" = -a ]]; then
			all=YesPlease
			shift
		elif [[ "$1" = -r ]]; then
			reports+=("$2")
			shift 2
		elif [[ "$1" = -r* ]]; then
			reports+=("${1#-r}")
			shift
		elif [[ "$1" = -- ]]; then
			shift
			break
		else
			# Probably something like '-home', which just wants to
			# be processed as a filter
			break
		fi
	done

	if [[ -z "$all" && "${#reports[*]}" -eq 0 ]]; then
		# No report specified explicitly, so use the default: the
		# current report within taskloop, or all current reports
		# elsewhere.
		if [[ -v TASKLOOP ]]; then
			files=("$tmpdir"/filter)
		else
			files=(/tmp/taskloop.*/filter)
		fi
	elif [[ "$all" ]]; then
		files=(/tmp/taskloop.*/filter)
	else
		files=()
		for report in "${reports[@]}"; do
			files+=(/tmp/taskloop."$report".*/filter)
		done
	fi

	if (( $# == 0 )); then
		echo 'No filter specified' >&2
		return 1
	fi
	uuids=($(_task_quick_quiet "$@" _unique uuid))
	if (( ${#uuids[*]} == 0 )); then
		echo 'No matched tasks' >&2
		return 1
	fi

	for f in "${files[@]}"; do
		printf 'uuid.not:%s\n' "${uuids[@]}" >>"$f"
	done
}

# Just add the specified filters to all current taskloop instances.
tlf () {
	trap 'trap - ERR RETURN; return' ERR RETURN
	local report f all=
	local -a reports=() files
	while [[ "$1" = -* ]]; do
		if [[ "$1" = -a ]]; then
			all=YesPlease
			shift
		elif [[ "$1" = -r ]]; then
			reports+=("$2")
			shift 2
		elif [[ "$1" = -r* ]]; then
			reports+=("${1#-r}")
			shift
		elif [[ "$1" = -- ]]; then
			shift
			break
		else
			# Probably something like '-home', which just wants to
			# be processed as a filter
			break
		fi
	done

	if [[ -z "$all" && "${#reports[*]}" -eq 0 ]]; then
		# No report specified explicitly, so use the default: the
		# current report within taskloop, or all current reports
		# elsewhere.
		if [[ -v TASKLOOP ]]; then
			files=("$tmpdir"/filter)
		else
			files=(/tmp/taskloop.*/filter)
		fi
	elif [[ "$all" ]]; then
		files=(/tmp/taskloop.*/filter)
	else
		files=()
		for report in "${reports[@]}"; do
			files+=(/tmp/taskloop."$report".*/filter)
		done
	fi

	shift "$((OPTIND - 1))"

	if (( $# == 0 )); then
		echo 'No filter specified' >&2
		return 1
	fi

	for f in "${files[@]}"; do
		printf '%s\n' "$@" >>"$f"
	done
}

tlef () {
	if [[ "$1" ]]; then
		editor /tmp/taskloop."$1".*/filter
	elif [[ -v TASKLOOP ]]; then
		editor "$tmpdir"/filter
	else
		editor /tmp/taskloop.*/filter
	fi
}

tlec () {
	if [[ "$1" ]]; then
		editor /tmp/taskloop."$1".*/config
	elif [[ -v TASKLOOP ]]; then
		editor "$tmpdir"/config
	else
		editor /tmp/taskloop.*/config
	fi
}

declare TPREPORT
declare -a TPFILTER
prompt_display () {
	if [[ "$TPREPORT" ]]; then
		if (( "${#TPFILTER[*]}" > 0 )); then
			local msg
			printf -v msg '%q ' "${TPFILTER[@]}"
			msg="filter: ${msg% }"
			cut_message "$msg"
		fi
		task "${TPFILTER[@]}" "$TPREPORT"
	fi
}

pnl () {
	local limit="$1"
	[[ "$limit" ]] || limit=page
	shift
	TPREPORT=next
	TPFILTER=(limit:"$limit" "$@")
}

pwl () {
	local limit="$1"
	[[ "$limit" ]] || limit=page
	shift
	TPREPORT=waitingfor
	TPFILTER=(limit:"$limit" "$@")
}

# This based on the code in bash-git-prompt.
if (( BASH_VERSINFO[0] > 5 || BASH_VERSINFO[0] == 5 && BASH_VERSINFO[1] >= 1 )); then
	PROMPT_COMMAND+=(prompt_display)
else
	PROMPT_COMMAND+=';prompt_display'
fi

# vim: ft=bash noet ts=8
