[diff]
	algorithm = patience
	interHunkContext = 6
[difftool]
	prompt = false
[grep]
	lineNumber = true
[log]
	decorate = short
	mailmap = true
[mergetool]
	prompt = false
[push]
	default = simple
	autoSetupRemote = true
[rebase]
	autoSquash = true
[rerere]
	enabled = true
[svn]
	pushmergeinfo = true
[url "https://github.com/"]
	insteadOf = git://github.com/
[url "https://gist.github.com/"]
	insteadOf = git://gist.github.com/
[user]
	name = Adam Dinwoodie
[alias]
	# When using bashisms below (notably [[ ... ]]), make sure to invoke
	# bash explicitly -- on Debian, Git aliases beginning with "!" are
	# invoked in dash by default.

	# Simple short forms
	st = status
	co = checkout
	ci = commit
	h = help

	# More complicated shortcuts
	about = describe --all --always
	raw = show --format=raw
	full = show --format=full
	fuller = show --format=fuller
	amend = commit --amend -C HEAD
	ita = add --intent-to-add
	rm-cur-br = "!bash -c 'br=$(git symbolic-ref --short HEAD); git detach; if [[ $1 == -D ]]; then git branch -D $br; else git branch -d $br; fi' --"
	sth = status -- .
	detach = checkout --detach
	pullout = "!f() { git checkout -B \"$1\" \"$1\"@{u}; }; f"
	qmerge = merge --no-edit
	pwl = push --force-with-lease

	# Logs
	lug = log -u

	# Graphical logs
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	lols = log --graph --decorate --pretty=oneline --abbrev-commit --stat
	lolas = log --graph --decorate --pretty=oneline --abbrev-commit --all --stat

	# Repository information
	list-all-objs = "!f() { { git rev-list --objects --all; git rev-list --objects -g --all; git rev-list --objects $(git fsck --unreachable | grep '^unreachable' | cut -d' ' -f3);} | cut -d' ' -f1 | sort -u;}; f"
	roots = log --max-parents=0 --pretty=format:%H

	# Subversion shortcuts
	rev-to-hash = "!bash -c 'while getopts b: opt; do case $opt in b) branch=$OPTARG;; esac; done; shift $((OPTIND - 1)); while (( $# > 0 )); do count=0; for r in $(git svn find-rev r$1 $branch | sed -nr '/^[0-9a-f]{40}$/p'); do (( count++ )); echo $r; done; if (( count != 1 )); then echo \"Caution: found $count commits for r$1\" >&2; fi; shift; done' --"

	# Conflict handling
	conflicting = !bash -c '[[ -n $(git ls-files --unmerged) ]]'
	conflicts = "!cd ${GIT_PREFIX:-.}; git ls-files --unmerged | cut -f2 | sort -u"

	# Use to stash the current changes, perform an operation, then unstash
	# them.  Specifically, use `git stashed !!` in place of `git stash &&
	# !! && git stash pop`.
	stashed = "!f () { git stash save && \"$@\" && git stash pop; }; f"

	# Branch description management
	db = "!f () { if (( $# > 0 )); then branch=\"$1\"; else branch=\"$(git symbolic-ref --short HEAD)\" || exit 2; fi; git config --get branch.\"$branch\".description; }; f"

	# Repository description management
	dr = ! description_file=\"$(git rev-parse --git-dir)\"/description && cat \"$description_file\"
	sdr = "!f () { editor=\"$(git var GIT_EDITOR)\" && description_file=\"$(git rev-parse --git-dir)\"/description && if (( $# > 0 )); then echo "$@" > "$description_file"; else \"$editor\" \"$description_file\"; fi; }; f"

	# Fix the email address in the last commit
	fix-email = "!f () { git config user.email \"$1\" && git commit --amend --reset-author --no-edit; }; f"

	bivis = bisect visualize --graph --decorate --pretty=oneline --abbrev-commit
	git-ml-describe = show -s --pretty=reference
	mydescribe = show -s --pretty='format:%h (\"%s\")'
[core]
	pager = less -S
[sendemail]
	confirm = always
	annotate = true
	suppresscc = self
[pull]
	ff = only
[init]
	defaultBranch = main
[include]
	# Put this at the bottom, so local values will override general ones.
	path = ~/.config/git/localconfig
