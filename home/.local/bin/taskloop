#!/usr/bin/env bash

set -euo pipefail

if (( $# != 1 )); then
	exit 64  # EX_USAGE
else
	report="$1"
fi

toilpid=
sleeppid=

flagdir="$(mktemp -dt "taskloop.$report.$$.XXXXX")"

cleanup () {
	trap - SIGWINCH
	rm -rf "$flagdir"
	local -a kill=()
	[[ "$toilpid" ]] && kill+=("$toilpid")
	[[ "$sleeppid" ]] && kill+=("$sleeppid")
	if (( "${#kill[*]}" > 0 )); then
		# kill is allowed to return non-zero because it's fairly likely
		# one or both sleep commands will have exited already.
		kill "${kill[@]}" 2>/dev/null || :
		wait "${kill[@]}"
	fi
}
trap cleanup EXIT

trap : SIGWINCH

configfile="$flagdir"/config
filterfile="$flagdir"/filter

data_path="$(task _get rc.data.location)"
data_path="${data_path%/}"

if [[ -v TASKRC ]]; then
	config_path="$TASKRC"
elif [[ -r "$HOME"/.taskrc ]]; then
	config_path="$HOME"/.taskrc
elif [[ -v XDG_CONFIG_HOME && -r "$XDG_CONFIG_HOME"/task/taskrc ]]; then
	config_path="$XDG_CONFIG_HOME"/task/taskrc
elif [[ -r "$HOME"/.config/task/taskrc ]]; then
	config_path="$HOME"/.config/task/taskrc
else
	echo 'Could not find a taskrc file' >&2
	exit 66  # EX_NOINPUT
fi

immediate_update_files=("$configfile" "$filterfile" "$config_path")
delay_update_files=("$data_path"/{completed,pending}.data)

printf '%s\n' reserved.lines=0 verbose=blank,header,footnote,label,affected,context gc=0 >"$configfile"
>"$filterfile"

while :; do
	if [[ -z "$toilpid" ]]; then
		toil "${immediate_update_files[@]}" "${delay_update_files[@]}" &
		toilpid="$!"
	fi
	if [[ "$sleeppid" ]]; then
		# Always restart the refresh timer when redrawing the table.
		kill "$sleeppid"
	fi
	sleep 15m &
	sleeppid="$!"
	mapfile -t config <"$configfile"
	mapfile -t filter <"$filterfile"
	task "${config[@]/#/rc.}" "${filter[@]}" limit:page "$report"
	printf '%(%A %d %B %T %Z)T ' -1
	if wait -np waitedpid "$toilpid" "$sleeppid"; then
		# One of the two processes return success.
		case "$waitedpid" in
			"$toilpid")
				# A file change was detected.
				toilpid=
				;;
			"$sleeppid")
				# The timeout for doing a refresh has expired.
				sleeppid=
				;;
		esac
	else
		waitrc="$?"
		if (( waitrc == 156 )) && [[ ! -v waitedpid ]]; then
			# wait ended with SIGWINCH, i.e. the terminal window
			# size changed.  That means we need to re-run the
			# command to fit the new terminal size.
			:
		else
			# Non-zero return code or unexpected signal, so exit
			# with that return code.
			exit "$waitrc"
		fi
	fi

	echo -n Updating...
	mtimewait 2 "${delay_update_files[@]}"
done

# vim: ft=bash noet ts=8
