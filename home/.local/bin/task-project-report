#!/usr/bin/env bash
set -euo pipefail

help () {
	printf '%q [-aPph] [-l <lessoptions>]... [<filter>...]\n' "$0"
	printf '\n'
	printf 'Provide a report of open tasks in TaskWarrior, displayed by\n'
	printf 'project.\n'
	printf '\n'
	printf -- '-a: List all tasks; normally if no filter is specified,\n'
	printf '    filter `-COMPLETED -DELETED -PARENT` is applied\n'
	printf '    automatically.'
	printf -- '-P: Disable pagination using less.'
	printf '\n'
	printf -- '-p: Force pagination using less regardless of whether\n'
	printf '    stdout is attached to a terminal.\n'
	printf '\n'
	printf -- '-l: Add the given option string to the arguments passed\n'
	printf '    to less.  Can be specified multiple times.\n'
	printf '\n'
	printf -- '-h: Print this help message.\n'
}


less_opts=()
forbid_pagination=
force_pagination=
include_all=
while getopts aPpl:h opt; do
	case "$opt" in
		a)	include_all=Yes;;
		P)	forbid_pagination=Yes;;
		p)	force_pagination=Yes;;
		l)	less_opts="$OPTARG";;
		h)	help
			exit 0
			;;
	esac
done
shift "$((OPTIND - 1))"


if [[ "$forbid_pagination" && "$force_pagination" ]]; then
	printf 'Cannot specify both -p and -P\n\n'
	help
	exit 64  # EX_USAGE
elif [[ "$forbid_pagination" ]] && (( "${#less_opts[*]}" > 0 )); then
	printf 'Cannot specify both -P and -l\n\n'
	help
	exit 64  # EX_USAGE
elif (( $# > 0 )) && [[ "$include_all" ]]; then
	printf 'Cannot specify a filter while using -a\n\n'
	help
	exit 64  # EX_USAGE
fi >&2

if [[ "$force_pagination" || ( -t 0 && ! "$forbid_pagination" ) ]]; then
	paginate=Yes
	if (( "${#less_opts[*]}" == 0 )); then
		less_opts=(-FSR)
	fi
else
	paginate=
fi

if [[ "$include_all" ]]; then
	filter=()
elif (( $# > 0 )); then
	filter=("$@")
else
	filter=(-COMPLETED -DELETED -PARENT)
fi

{ task "${filter[@]}" _unique uuid; printf '\0'; task export; } |
	if [[ "$paginate" ]]; then
		jq -Rsrf ~/.local/lib/task-project-report.jq |
			less "${less_opts[@]}"
	else
		jq -Rsrf ~/.local/lib/task-project-report.jq
	fi
